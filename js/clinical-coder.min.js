document.addEventListener("DOMContentLoaded", (() => { loadScript("https://code.jquery.com/jquery-3.7.0.js", (function () { $("#clinical-code").append(GenerateContent), loadScript("https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js", (function () { isDataLoaded = !0, loadScript("https://aka.ms/csspeech/jsbrowserpackageraw", (function () { })) })) })) })); var dataLoadInterval, calbackResponse, APIKEY, codeTypeParam, isDataLoaded = !1, baseUrl = "https://edarat.octopian.cloud"; function loadScript(e, t = function () { }) { var n = document.getElementsByTagName("head")[0], a = document.createElement("script"); a.type = "text/javascript", a.src = e, a.onreadystatechange = t, a.onload = t, n.appendChild(a) } function ChangeTheme(e) { const { themeColor: t, textColor: n } = e; return e && 0 !== Object.keys(e).length && (document.documentElement.style.setProperty("--Theme-background-color", t), document.documentElement.style.setProperty("--Theme-text-color", n)), !1 } function GenerateClinicalCode(e) { e.apiKey ? dataLoadInterval || (dataLoadInterval = setInterval((function () { isDataLoaded && (APIKEY = e.apiKey, ChangeTheme(e.theme), $(".predict-btn").removeAttr("disabled"), clearInterval(dataLoadInterval), dataLoadInterval = null, "function" == typeof e.calbackResponse && (calbackResponse = e.calbackResponse)) }), 500)) : alert("No API Key Provided!") } var GenerateContent = '<button class="btn btn-generate" type="button" data-bs-target="#offcanvasBottom" aria-controls="offcanvasBottom" onclick="Generate();">Generate</button><div class="offcanvas offcanvas-bottom" tabindex="-1" id="offcanvasBottom" aria-labelledby="offcanvasBottomLabel"><div class="spinner-container" style="display:none"><div class="spinner-border" role="status"></div></div><div class="offcanvas-header"><h5 class="offcanvas-title" id="offcanvasBottomLabel">Clinical Coder</h5><button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button></div><div class="offcanvas-body"><div class="flex-content"><div class="recording"><div class="recording-header"><h5>Recording</h5></div><div class="recording-body"><div class="recording-btn"></div><div class="mic" onClick="startRecording()"></div><div class="mic-stop" onClick="stopRecording()"></div><pre class="waiting">Wait a second...</pre></div></div><div class="medical-record"><div class="medical-record-header"><h5>Medical Record</h5></div><div class="medical-record-body"><pre id="medicalRecord" contenteditable="true">There is no medical record yet.</pre></div><div class="generate-btn"><button onClick="generateCodesByText()">Generate</button></div></div><div class="coding"><div class="coding-header"><nav><div class="nav nav-tabs" id="nav-tab" role="tablist"><button class="nav-link active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home" aria-selected="true" onclick="OnTabSwitch()">Certain</button><button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile" aria-selected="false" onclick="OnTabSwitch()">Probable</button></div></nav></div><div class="coding-body"><div class="tab-content" id="nav-tabContent"><div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab"><div class="accordion"><div class="accordion-item" id="CertainAccordion"><pre>There is no data.</pre></div></div></div><div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab"><div class="accordion"><div class="accordion-item" id="ProbableAccordion"><pre>There is no data.</pre></div></div></div></div></div><button type="button" class="btn-code predict-btn" onclick="PredictClinical()" data-bs-target="#cliniclCoderModal" disabled>Code</button></div></div></div><div id="selected-code-recommendation-container" class="mainList" style="display:none"><div class="list-group-header"><h5>Selected Code Recommendation</h5></div><div id="mainSelectedItems"></div></div></div><div class="modal fade" id="cliniclCoderModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true"><div class="modal-dialog modal-dialog-scrollable modal-dialog-centered"><div class="modal-content"><div class="modal-body"><div class="list"><div class="list-group-header"><h5>Recommendation Codes</h5></div><div class="accordion"><ul class="accordion-item" id="PredictClinicalDTOsDataSource"></ul></div></div><div class="list"><div class="list-group-header"><h5>Selected Codes</h5></div><div id="selectedItems"></div></div></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button><button type="button" id="save-btn" class="btn btn-primary save-btn" onclick="SelectClinicalCode()">Done</button></div></div></div></div>'; const myText = "Diagnosis Status post right hemicolectomy and repair of ventral hernia.  Reason For Visit The patient is a 27-year-old male who underwent a Billroth I gastric resection for a chronic refractory ulcer. The patien was sent to Dr. Jane Doe in order to have an upper endoscopy as well as colonoscopy. \n\nThe upper GI was normal; however,on colonoscopy multiple polyps were seen, most of which were adenomatous. There was a large lesion at the hepaticflexure that was ulcerated and biopsy of this revealed carcinoma. He was referred to Dr. John Doe for surgicalmanagement. He was seen and on examination was noted to have a ventral hernia in the previous midline incision. It wasrecommended that he undergo surgical removal of the right colon as well as ventral hernia repair.  \n\nPast Medical History The patient has a past medical history with Hypertension and Diabetes  Social History The patient has a social history with Smoking  Vital Signs Diastolic Blood Pressure 72  Systolic Blood Pressure 104  Height 182  Body Temperature 38.5  Heart Rate 90  Weight 85  Respiratory Rate 95    Medications Nexium 40 mg p.o. daily. Claritin 10 mg p.o. daily. Allopurinol 300 mg p.o. daily. Maxzide 37.5 mg p.o. daily. Tricor 145 mg p.o. daily. Remeron 30 mg p.o. daily. Aspirin 81 mg p.o. daily. Trazodone p.r.n. Viagra p.r.n. Multivitamins. Fish oil. Garlic. Monthly B12 shots. Percocet 5/325 mg 1-2 p.o. q. 4-6 h. p.r.n. pain.   \n\nProcedures The patient underwent a right hemicolectomy for hepatic flexure cancer. He also underwent repair of a ventral hernia.   \n\nGeneral General examination: The patient is a well-developed, well-nourished male, in no acute distress.  \n\nHeent Heent examination: Pupils are equal, round and reactive to light and accommodation. Extraocular movements are intact.Sclerae anicteric. Mucous membranes are moist. Uvula and tongue are midline.  Neck Neck examination: No thyromegaly, No JVD or carotid bruits.  Lungs Lungs Examination: Clear to auscultation bilaterally.  Heart Heart Examination: Regular rhythm and rate. No S3 or murmur"; var Analyze, medicalRecord, Diagnosis = []; function Generate() { $(".offcanvas").offcanvas("toggle") } function generateMedicalRecordByVoice(e) { $("#medicalRecord").html(e) } function generateCodesByText() { Diagnosis = []; var e = $("#medicalRecord")[0].innerText, t = baseUrl + "/AI/ClinicalCoding", n = '{"ClinicalCodingType":11,"TextRecord":"' + e + '"}'; ShowLoader(), fetch(t, { method: "POST", headers: { "Content-Type": "application/json", "Ocp-Apim-Subscription-Key": APIKEY }, body: n }).then((e => { if (!e.ok) throw new Error(`Network response was not ok. Status: ${e.status} - ${e.statusText ? e.statusText : "Bad Request."}`); return e.json() })).then((e => { HideLoader(), Analyze = JSON.parse(e.Analyze); var t = JSON.parse(e.Probable), n = JSON.parse(e.Certain); GenerateJSON(n).forEach((e => { "Diagnosis" === e.GroupName && e.ContentDetails.forEach((e => { Diagnosis.push(e.EntityMentionContent) })) })), DisplayCertainItem(n), DisplayProbableItem(t) })).catch((e => { HideLoader(), console.log(e.message), alert(e.message ? e.message : "Something went wrong. Check your apiKey."), $(".offcanvas").offcanvas("toggle") })) } function GenerateJSON(e) { var t = []; return $.each(e, (function (n) { var a = {}, o = e[n], i = o.GroupName; a.GroupName = i; var c = o.TextAnalysisModel, r = []; $.each(c, (function (e) { var t = {}, n = c[e].entityMention.text.content; t.EntityMentionContent = n; var a = c[e].entityMention.certaintyAssessment ? c[e].entityMention.certaintyAssessment.value : null; t.CertaintyAssessment = a || ""; var o = c[e].entityMention.temporalAssessment ? c[e].entityMention.temporalAssessment.value : null; t.TemporalAssessment = o || "", t.EntityMentionValue = a && o ? a + "," + o : ""; var i = c[e].entityMention.confidence; t.Confidence = i; var s = c[e].entityRelationshipList; $.each(s, (function (e) { var n = s[e].text.content; t.RelationshipContent = n })), r.push(t) })), a.ContentDetails = r, t.push(a) })), t } const DisplayCertainItem = async e => { var t = await GenerateJSON(e); if (t.length > 0) { const e = t.map((e => { const t = e.ContentDetails.map((t => { const { EntityMentionContent: n = "", EntityMentionValue: a = "", RelationshipContent: o = "", Confidence: i = "", CertaintyAssessment: c = "", TemporalAssessment: r = "" } = t, s = c && r ? "(" + c + " , " + r + ")" : "", l = GenerateRandomId(); return '<div id="' + RemoveSpaces(e.GroupName) + '" class="accordion-collapse collapse hide" aria-labelledby="panelsStayOpen-headingOne"><div class="accordion-body ' + l + '" onClick="ToggleCheckbox(this)"><input class="form-check-input me-1" type="checkbox" id="' + l + '" confidence="' + i + '" entityMentionContent="' + n + '" entityMentionValue="' + a + '" relationshipContent="' + o + '" onchange="OnSelectItem(this)" style="display:none"/><p class="likely-color">' + CapitalizeFirstLetter(n) + " " + s + "</p><p>" + CapitalizeFirstLetter(o) + '</p><p class="code"><code>' + i + "</code ></p > </div></div>" })); return '<h2 class="accordion-header" id="panelsStayOpen-headingOne"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#' + RemoveSpaces(e.GroupName) + '" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">' + e.GroupName + "</button></h2>" + t.join(" ") })); $("#CertainAccordion").html(e.join(" ")) } else $("#CertainAccordion").html("<pre>There is no certain data.</pre>") }, DisplayProbableItem = async e => { var t = await GenerateJSON(e); if (t.length > 0) { const e = t.map((e => { const t = "C" + GenerateRandomId(), n = e.ContentDetails.map((e => { const { EntityMentionContent: n = "", EntityMentionValue: a = "", RelationshipContent: o = "", Confidence: i = "" } = e, c = a ? " (" + a + ")" : "", r = GenerateRandomId(); return '<div id="' + t + '" class="accordion-collapse collapse hide" aria-labelledby="panelsStayOpen-headingOne"><div class="accordion-body ' + r + '" onClick="ToggleCheckbox(this)"><input class="form-check-input me-1" type="checkbox" id="' + r + '" confidence="' + i + '" entityMentionContent="' + n + '" entityMentionValue="' + a + '" relationshipContent="' + o + '" onchange="OnSelectItem(this)" style="display:none"/><p>' + CapitalizeFirstLetter(n) + " " + c + "</p><p>" + CapitalizeFirstLetter(o) + '</p><p class="code"><code>' + i + "</code ></p > </div></div>" })); return '<h2 class="accordion-header" id="panelsStayOpen-headingOne"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#' + t + '" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">' + e.GroupName + "</button></h2>" + n.join(" ") })); $("#ProbableAccordion").html(e.join(" ")) } else $("#ProbableAccordion").html("<pre>There is no probable data.</pre>") }; function RemoveSpaces(e) { return e.replace(/\s/g, "") } var SelectedItemArray = [], HighlightedArray = []; function OnSelectItem(e) { HighlightedArray = []; var t = $(e).prop("checked"), n = $(e).attr("id"), a = $(e).attr("confidence"), o = $(e).attr("entityMentionContent"), i = $(e).attr("entityMentionValue"), c = $(e).attr("relationshipContent"); if (t) SelectedItemArray.push({ Id: n, Confidence: a, EntityMentionContent: o, EntityMentionValue: i, RelationshipContent: c }), $("." + n).addClass("isSelected"), HighlightedArray.push(o || "#@$", c || "@#$"), HighlightTexts(HighlightedArray); else { var r = SelectedItemArray.findIndex((e => e.Id === n && e.Confidence === a && e.EntityMentionContent === o && e.EntityMentionValue === i && e.RelationshipContent === c)); -1 !== r && SelectedItemArray.splice(r, 1), $("." + n).removeClass("isSelected"), HighlightedArray.push(o || "#@$", c || "@#$"), RemoveHighlightTexts(HighlightedArray) } } function OnTabSwitch() { SelectedItemArray = [], document.querySelectorAll('input[type="checkbox"]').forEach((function (e) { e.checked = !1, $(".accordion-body").removeClass("isSelected") })); var e = document.getElementById("medicalRecord"); e.innerHTML = e.innerHTML.replace(/<span style="background-color: yellow;">(.*?)<\/span>/g, "$1") } function ConvertLikelyColor(e) { return e.replace(/LIKELY/gi, '<span style="color:#00f100">LIKELY</span>') } function ToggleCheckbox(e) { var t = e.querySelector('input[type="checkbox"]'); t.checked = !t.checked, t.dispatchEvent(new Event("change")) } function CapitalizeFirstLetter(e) { return e.charAt(0).toUpperCase() + e.slice(1) } function GenerateRandomId() { const e = Math.pow(10, 14), t = Math.pow(10, 15) - 1; return Math.floor(Math.random() * (t - e + 1)) + e } function HighlightTexts(e) { var t = document.getElementById("medicalRecord"), n = t.innerHTML; e.forEach((function (e) { n = n.replace(new RegExp(e, "g"), '<span style="background-color: yellow;">$&</span>'), t.innerHTML = n })) } function RemoveHighlightTexts(e) { var t = document.getElementById("medicalRecord"), n = t.innerHTML; e.forEach((function (e) { n = n.replace(new RegExp(e, "g"), '<span style="background-color: #fff;">$&</span>') })), t.innerHTML = n } function generateCodes(e) { $("#cliniclCoderModal").modal("toggle"); const t = GenerateRandomId(); if (e.length > 0) { const n = e.map((e => { const n = e.diagnosis.map((n => n.itemList.map((a => '<div id="' + RemoveSpaces(e.groupName) + '" class="accordion-collapse collapse hide" aria-labelledby="panelsStayOpen-headingOne"><div class="accordion-body ' + t + '"><li class="list-group-item"><div><input class="form-check-input me-1" type="checkbox" id="' + a.iteM_CODE + '" code="' + a.iteM_CODE + '" itemName="' + a.iteM_DESC + '" CodeType="' + n.rerankerScore + '"  onchange="Check(this)"><label style="width: 6rem" class="form-check-label stretched-link code" for="' + a.iteM_CODE + '">' + a.iteM_CODE + '</label><label class="form-check-label stretched-link name" for="' + a.iteM_CODE + '">' + a.iteM_DESC + '</label></div><div style="display: none" class="code-type">' + n.rerankerScore + "</div></li></div></div>")).join(" "))); return '<h2 class="accordion-header" id="panelsStayOpen-headingOne"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#' + RemoveSpaces(e.groupName) + '" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">' + CapitalizeFirstLetter(e.groupName) + "</button></h2>" + n.join(" ") })); $("#PredictClinicalDTOsDataSource").html(n.join(" ")) } else $("#PredictClinicalDTOsDataSource").html('<p style="text-align: center;margin-top: 2rem;">There is no codes with code type <b>ICD10AM</b>.</p>') } function ShowLoader() { $(".spinner-container").show() } function HideLoader() { $(".spinner-container").hide() } var SelectedItemDTOs = []; function PredictClinical() { SelectedItemDTOs = [], DisplaySelectedItems([]), PredictClinicalDTOsDataSource; var e = baseUrl + "/AI/ClinicalCoding", t = '{"ClinicalCodingType":12,"TextRecord":' + JSON.stringify(Diagnosis) + "}"; ShowLoader(), fetch(e, { method: "POST", headers: { "Content-Type": "application/json", "Ocp-Apim-Subscription-Key": APIKEY }, body: t }).then((e => { if (!e.ok) throw new Error("Network response was not ok"); return e.json() })).then((e => { HideLoader(), generateCodes(e) })).catch((e => { HideLoader(), console.log(e), alert("Something went wrong. Check your apiKey."), $(".offcanvas").offcanvas("toggle") })) } function Check(e) { var t = $(e).prop("checked"), n = $(e).attr("code"), a = ($(e).attr("codetype"), $(e).attr("itemname")), o = $("#medicalRecord")[0].innerText; t ? SelectedItemDTOs.push({ Code: n, Name: a, MedicalText: o }) : SelectedItemDTOs = SelectedItemDTOs.filter((e => e.Code !== n)), DisplaySelectedItems(SelectedItemDTOs) } function DisplaySelectedItems(e) { var t = ""; 0 === e.length ? t = '<p style="text-align: center;margin-top: 2rem;">No codes selected yet.</p>' : e.map(((e, n) => { t += '<div class="border" style="padding: 10px;height: auto;background-color: #5683b61a;"><div class="item-name"><i class="fa-solid fa-circle-check" style="color: #04118f;font-size: 1.5rem;"></i><p>' + e.Code + "</p><p>" + e.Name + "</p></div></div>" })), $("#selectedItems").html(t) } function SelectClinicalCode() { $("#cliniclCoderModal").modal("toggle"), $(".offcanvas").offcanvas("toggle"), calbackResponse(SelectedItemDTOs) } function screenLogger(e, t) { log.innerHTML += "\n" + e + " " + (t || "") } function guidGenerator() { var e = function () { return (65536 * (1 + Math.random()) | 0).toString(16).substring(1) }; return e() + e() + "-" + e() + "-" + e() + "-" + e() + "-" + e() + e() + e() } const getAccessToken = async () => { $(".mic").hide(), $(".mic-stop").hide(), $(".waiting").show(); var e = baseUrl + "/AI/ClinicalCoding"; return new Promise(((t, n) => { fetch(e, { method: "POST", headers: { "Content-Type": "application/json" }, body: '{"ClinicalCodingType":13}' }).then((e => { if (!e.ok) throw new Error("Network response was not ok"); return e.text() })).then((e => { $(".waiting").show(), t(e) })).catch((e => { $(".waiting").show(), n(e) })) })) }; var phraseDiv, startRecognizeOnceAsyncButton, stopRecognizeButton, subscriptionKey, serviceRegion, SpeechSDK, recognizer; async function startRecording() { const e = await getAccessToken(); $(".mic").hide(), $(".waiting").hide(), $(".mic-stop").show(), document.getElementById("medicalRecord").innerHTML = ""; var t = SpeechSDK.SpeechConfig.fromAuthorizationToken(e, "westeurope"); t.speechRecognitionLanguage = "en-US"; var n = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput(); (recognizer = new SpeechSDK.SpeechRecognizer(t, n)).recognized = (e, t) => { t.result.reason === SpeechSDK.ResultReason.RecognizedSpeech ? (console.log(`RECOGNIZED: Text=${t.result.text}`), document.getElementById("medicalRecord").innerHTML += t.result.text + " ") : t.result.reason === SpeechSDK.ResultReason.NoMatch && console.log("NOMATCH: Speech could not be recognized.") }, recognizer.canceled = function (e, t) { phraseDiv.innerHTML += "Recognition canceled: " + t.reason, document.getElementById("medicalRecord").innerHTML = "Recognition canceled: " + t.reason, recognizer.stopContinuousRecognitionAsync(), recognizer = void 0, $(".mic-stop").hide(), $(".waiting").hide(), $(".mic").show() }, recognizer.sessionStopped = function (e, t) { recognizer.stopContinuousRecognitionAsync(), recognizer = void 0, $(".mic-stop").hide(), $(".waiting").hide(), $(".mic").show() }, recognizer.startContinuousRecognitionAsync() } function stopRecording() { recognizer && recognizer.stopContinuousRecognitionAsync((function () { $(".mic-stop").hide(), $(".waiting").hide(), $(".mic").show() }), (function (e) { phraseDiv.innerHTML += "Error stopping recognizer: " + e, $(".mic-stop").hide(), $(".waiting").hide(), $(".mic").show() })) }
